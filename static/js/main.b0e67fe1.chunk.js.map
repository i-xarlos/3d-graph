{"version":3,"sources":["imgs/cat.jpg","imgs/dog.jpg","imgs/eagle.jpg","imgs/elephant.jpg","imgs/grasshopper.jpg","imgs/octopus.jpg","imgs/owl.jpg","imgs/panda.jpg","imgs/tiger.jpg","imgs/whale.jpg","App.js","reportWebVitals.js","index.js"],"names":["App","imgs","cat","dog","eagle","elephant","grasshopper","octopus","owl","panda","tiger","whale","fgRef","useRef","ele","id","gData","nodes","map","img","color","name","links","Array","length","keys","filter","source","target","Math","round","random","handleClick","useCallback","node","distRatio","hypot","x","y","z","current","cameraPosition","className","ref","graphData","onNodeClick","onEngineStop","zoomToFit","nodeThreeObject","imgTexture","THREE","load","material","sprite","scale","set","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LAAe,MAA0B,gCCA1B,MAA0B,gCCA1B,MAA0B,kCCA1B,MAA0B,qCCA1B,MAA0B,wCCA1B,MAA0B,oCCA1B,MAA0B,gCCA1B,MAA0B,kCCA1B,MAA0B,kCCA1B,MAA0B,kC,QCsG1BA,MArFf,WACE,IAAMC,EAAO,CACXC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAGIC,EAAQC,iBAAO,MAGfC,EAAM,SAACC,GAAD,oFAC2Dd,EAAKc,GADhE,sDAGNC,EAAQ,CACZC,MAAOhB,EAAKiB,KAAI,SAACC,EAAKJ,GAAN,MAAc,CAC5BA,KACAK,MAAO,UACPC,KAAMP,EAAIC,GACVI,UAEFG,MAAO,YAAIC,MAAMtB,EAAKuB,QAAQC,QAC3BC,QAAO,SAACX,GAAD,OAAQA,KACfG,KAAI,SAACH,GAAD,MAAS,CACZY,OAAQZ,EACRa,OAAQC,KAAKC,MAAMD,KAAKE,UAAYhB,EAAK,SAIzCiB,EAAcC,uBAClB,SAACC,GAEC,IACMC,EAAY,EADD,GACgBN,KAAKO,MAAMF,EAAKG,EAAGH,EAAKI,EAAGJ,EAAKK,GAEjE3B,EAAM4B,QAAQC,eACZ,CAAEJ,EAAGH,EAAKG,EAAIF,EAAWG,EAAGJ,EAAKI,EAAIH,EAAWI,EAAGL,EAAKK,EAAIJ,GAC5DD,EACA,OAGJ,CAACtB,IAGH,OACE,qBAAK8B,UAAU,MAAf,SACE,cAAC,IAAD,CACEC,IAAK/B,EACLgC,UAAW5B,EACX6B,YAAab,EACbc,aAAc,kBAAMlC,EAAM4B,QAAQO,UAAU,MAC5CC,gBAAiB,YAA+B,IAA5B7B,EAA2B,EAA3BA,IACZ8B,GADuC,EAAtBlC,GAAsB,EAAlBK,MAAkB,EAAXC,MACf,IAAI6B,KAAsBC,KAA1B,UAAkChC,KAC/CiC,EAAW,IAAIF,IAAqB,CAAEhC,IAAK+B,IAC3CI,EAAS,IAAIH,IAAaE,GAGhC,OADAC,EAAOC,MAAMC,IAAI,GAAI,IACdF,QCpEFG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b0e67fe1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cat.1cec6b41.jpg\";","export default __webpack_public_path__ + \"static/media/dog.faa9a8ea.jpg\";","export default __webpack_public_path__ + \"static/media/eagle.1a84eace.jpg\";","export default __webpack_public_path__ + \"static/media/elephant.e8f7f3a0.jpg\";","export default __webpack_public_path__ + \"static/media/grasshopper.b79aa4a9.jpg\";","export default __webpack_public_path__ + \"static/media/octopus.469d1be6.jpg\";","export default __webpack_public_path__ + \"static/media/owl.1226bc80.jpg\";","export default __webpack_public_path__ + \"static/media/panda.9c999762.jpg\";","export default __webpack_public_path__ + \"static/media/tiger.aa0b28f1.jpg\";","export default __webpack_public_path__ + \"static/media/whale.74960436.jpg\";","import \"./App.css\";\r\nimport { ForceGraph3D } from \"react-force-graph\";\r\n//import myData from \"./data.json\";\r\nimport * as THREE from \"three\";\r\n//import { CSS2DRenderer, CSS2DObject } from \"three-css2drender\";\r\nimport cat from \"./imgs/cat.jpg\";\r\nimport dog from \"./imgs/dog.jpg\";\r\nimport eagle from \"./imgs/eagle.jpg\";\r\nimport elephant from \"./imgs/elephant.jpg\";\r\nimport grasshopper from \"./imgs/grasshopper.jpg\";\r\nimport octopus from \"./imgs/octopus.jpg\";\r\nimport owl from \"./imgs/owl.jpg\";\r\nimport panda from \"./imgs/panda.jpg\";\r\nimport tiger from \"./imgs/tiger.jpg\";\r\nimport whale from \"./imgs/whale.jpg\";\r\nimport { useCallback, useRef } from \"react\";\r\n\r\nfunction App() {\r\n  const imgs = [\r\n    cat,\r\n    dog,\r\n    eagle,\r\n    elephant,\r\n    grasshopper,\r\n    octopus,\r\n    owl,\r\n    panda,\r\n    tiger,\r\n    whale,\r\n  ];\r\n\r\n  const fgRef = useRef(null);\r\n\r\n  // Random connected graph\r\n  const ele = (id) =>\r\n    `<div class='node-label'><h1>Author: PPF</h1><img width=\"200\" src=\"${imgs[id]}\"><ul><li>data: 1</li><li>data: 2</li></ul></div>`;\r\n\r\n  const gData = {\r\n    nodes: imgs.map((img, id) => ({\r\n      id,\r\n      color: \"#00ff00\",\r\n      name: ele(id),\r\n      img,\r\n    })),\r\n    links: [...Array(imgs.length).keys()]\r\n      .filter((id) => id)\r\n      .map((id) => ({\r\n        source: id,\r\n        target: Math.round(Math.random() * (id - 1)),\r\n      })),\r\n  };\r\n\r\n  const handleClick = useCallback(\r\n    (node) => {\r\n      // Aim at node from outside it\r\n      const distance = 40;\r\n      const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\r\n\r\n      fgRef.current.cameraPosition(\r\n        { x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio }, // new position\r\n        node, // lookAt ({ x, y, z })\r\n        3000 // ms transition duration\r\n      );\r\n    },\r\n    [fgRef]\r\n  );\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ForceGraph3D\r\n        ref={fgRef}\r\n        graphData={gData}\r\n        onNodeClick={handleClick}\r\n        onEngineStop={() => fgRef.current.zoomToFit(100)}\r\n        nodeThreeObject={({ img, id, color, name }) => {\r\n          const imgTexture = new THREE.TextureLoader().load(`${img}`);\r\n          const material = new THREE.SpriteMaterial({ map: imgTexture });\r\n          const sprite = new THREE.Sprite(material);\r\n\r\n          sprite.scale.set(30, 30);\r\n          return sprite;\r\n\r\n          //const nodeEl = document.createElement(\"div\");\r\n          //nodeEl.textContent = name;\r\n          //nodeEl.style.color = color;\r\n          //nodeEl.className = \"node-label\";\r\n          //return new CSS2DObject(nodeEl);\r\n        }}\r\n        //nodeThreeObjectExtend={true}\r\n      />\r\n      {\r\n        //<ForceGraph3D\r\n        //width=\"100%\"\r\n        //height=\"600\"\r\n        //backgroundColor=\"#333\"\r\n        //graphData={myData}\r\n        ///>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}